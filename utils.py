import platform
import subprocess
from locale import atoi

import binascii
import inquirer
import sys

import os
from termcolor import colored
from unicorn import *
import capstone
from capstone import *
from unicorn import unicorn_const
import re


def clear_terminal():
    os.system('cls' if os.name == 'nt' else "clear && printf '\e[3J'")


def get_banner():
    banner = '202c404025202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d0a202020202f402520202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d0a2a202020202a402e202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d0a2620202020202c2a20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202e25404040402f200d0a402e202020202020202c2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202c202020202020202020202a40400d0a4023202020202020202c252020202020202020202020202020202020202020202020202020202020202020202020202020202c4040202020202020202840404040404040400d0a4040202020202020202026402e2020202020202020202020202020202020202020202020202020202020202020202020254040202020202020202e404023202020202028400d0a2026402f2020202020202023402820202020202020202020202020202020202020202020202020202020202020202c4040232020202020202028402e20202020202020202e0d0a20202f4040202020202020202040402c20202020202020202020202020202020202020202020202020202020202040404020202020202020232c20202020202020202020200d0a202020202f4020202020202020202f4023202020202020202020202020202020202020202020202020202020202040402620202020202020202020202020202020202020200d0a2020202020232e20202020202020202c40262020202020202020202020202020202020202020202020202020202026402620202020202020202020202020202020202020200d0a2020202020202020202020202020202040402c20202020202020202020202020202020202020202020202020202a40402a20202020202020202020202020202020202020200d0a2020202020202020202020202020202040402a2020202020202020202020202020202020202020202020202f404026202020202020202020202020202020202020202020200d0a2020202020202020202020202020202c404020202020202020202020202020202020202020202020202040402e202020202a402020202020202020202020202020202020200d0a202020202020202c2020202020202023402320202020202020202020202020202020202020202020202640202020202040402c2020202020202020202020202020202020200d0a202020202020202c2c20202020202026402f2020202020202020202020202020202020202020202020402c20202020254040202020202020202020202020202020202020200d0a2020202020202020402f202020202025402520202020202020202020202020202020202020202020202e2020202020404040202020202020202020202020202020202020200d0a20202020202020202040402f20202020404020202020202020202020202020202020202020202020202020202020204040402f2020202020202020202020202020202020200d0a20202020202020202020264040262e202a40252020202020202020202020202020202020202020202020202020202e404040232020202020202020202020202020202020200d0a20202020202020202020202025404040202640402e2020202020202020202020202020202020202020202020202040404040202020202020202020202020202020202020200d0a202020202020202020202020202026404040404040282020202c28252640404026252f2e2020202840252f2a264040402c20202020202020202020202020202020202020200d0a2020202020202020202020202020204040404040404020204040404040404040404040404020202640404040404026202020202020202020202020202020202020202020200d0a2020202020202020202020202020404040404040404020204040404040404040404040404020202840404040404040202020202020202020202020202020202020202020200d0a2020202020202020202020202020202c4040404040402e202028404040404040404040252020204040404040402a20202020202020202020202020202020202020202020200d0a2020202020202020202020202e262020202e4040404040402e20202e26404040262c2020202640404040402c202020252c20202020202020202020202020202020202020200d0a20202020202020202020202540402c2020234040404040404040402f20202020202a26404040404040404026202020404026202020202020202020202020202020202020200d0a202020202020202020204040402c20204040404040404040404040404026202f404040404040404040404040402020204040402e20202020202020202020202020202020200d0a20202020202020202e4040402320202640404040404040404040404040404040404040404040404040404040404020202a4040402c202020202020202020202020202020200d0a202020202020202040404040402020202c4040404040404040404040404040404040404040404040404040402a2020204040404040202020202020202020202020202020200d0a202020202020202e4040404040402020264040404040404040404040404040404040404040404040404040404020202540404040402c2020202020202020202020202020200d0a202020202020202a404040404020202840404040404040404040404040404040404040404040404040404040402820202640404040232020202020202020202020202020200d0a202020202020202c404040402f20204040404040404040404040404040404040404040404040404040404040402620202c40404040282020202020202020202020202020200d0a2020202020202020404040402820202840404040404040404040404040404040404040404040404040404040402320202a40404040202020202020202020202020202020200d0a202020202020202028404040402020202e20202e2f402520202e4040404040404040402e202025262a2e2020202020202640404025202020202020202020202020202020200d0a2020202020202020202a40402820202340404040262c2026402c202e404040404020202c4026202a26404040402320202a40402820202020202020202020202020202020200d0a202020202020202020202e2620202a2e202020202c264040404020204040404040202040404040262c202020202e2a2020232c2020202020202020202020202020202020200d0a20202020202020202020202020202025404026282e202020264020204040404040202040252020202e282640402520202020202020202020202020202020202020202020200d0a202020202020202020202e2020204040404040404040262e202e2020252f2c2a23202020202e2640404040404040402020202c2020202020202020202020202020202020200d0a20202020202020202028402e202e40404040404040404040262020202e2640262e20202026404040404040404040402c202e402520202020202020202020202020202020200d0a20202020202020202340404020202e404040404040404040404020202340404026202040404040404040404040402e202040404025202020202020202020202020202020200d0a20202020202020202540404040252020202e282526404040404020202340404026202040404040402625282e20202e264040404025202020202020202020202020202020200d0a2020202020202020202a40404040404040252a2e2e20202020202020264040404020202020202e2e2c2a2826404040404040402c20202020202020202020202020202020200d0a20202020202020202020202020202c2f25404040404040232c20202020202020202020202e2f26404040402c2e202020202020202020202020202020202020202020200d0a2020202020202020202020202020202020202020202020284040402e282c202e25204040402f202020202020202020202020202020202020202020202020202020202020200d0a2020202020202020202020202020202020202020204040404040404040252a23404040404040404020202020202020202020202020202020202020202020202020202020200d0a20202020202020202020202020202020202e402f202c404040404040404040404040404040404023202f402e202020202020202020202020202020202020202020202020200d0a20202020202020202020202020202020202020254020204040404040404040404040404040402a2040252020202020202020202020202020202020202020202020202020200d0a202020202020202020202020202020202020202e2e2823202c4040404040404040404040282023282e2e2020202020202020202020202020202020202020202020202020200d0a20202020202020202020202020202020202020202e40402e232c20202e2a2a2a2e20202e232e40402e202020202020202020202020202020202020202020202020202020200d0a20202020202020202020202020202020202020202020202540402e40402f202a40402e404025202020202020202020202020202020202020202020202020202020202020200d0a2020202020202020202020202020202020202020202020202a2e254040402e404040252e2a20202020202020202020202020202020202020202020202020202020202020200d0a'
    banner += '0d0a0d0a202f24242020202f242420202020202020202020202f242420202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202f242424242424242020202f24242424242420202f2424242424242420202f2424242424242424202020202020202f242424242424242020202020202020202020202f242420202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d0a7c20242420207c202424202020202020202020207c5f5f2f202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020207c2024245f5f20202424202f24245f5f202024247c2024245f5f202024247c2024245f5f5f5f5f2f2020202020207c2024245f5f20202424202020202020202020207c20242420202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d0a7c20242420207c202424202f2424242424242420202f242420202f2424242424242420202f2424242424242020202f24242424242420202f24242424242424202020202020207c20242420205c2024247c20242420205c2024247c20242420205c2024247c2024242020202020202020202020207c20242420205c20242420202f242424242424207c202424242424242420202f24242020202f242420202f2424242424242020202f2424242424242020202f2424242424242020202f242424242424200d0a7c20242420207c2024247c2024245f5f202024247c202424202f24245f5f5f5f5f2f202f24245f5f20202424202f24245f5f202024247c2024245f5f202024242020202020207c20242420207c2024247c20242420207c2024247c20242424242424242f7c2024242424242020202020202020207c20242420207c202424202f24245f5f202024247c2024245f5f202024247c20242420207c202424202f24245f5f20202424202f24245f5f20202424202f24245f5f20202424202f24245f5f202024240d0a7c20242420207c2024247c20242420205c2024247c2024247c2024242020202020207c20242420205c2024247c20242420205c5f5f2f7c20242420205c2024242020202020207c20242420207c2024247c20242420207c2024247c2024245f5f5f5f2f207c2024245f5f2f2020202020202020207c20242420207c2024247c2024242424242424247c20242420205c2024247c20242420207c2024247c20242420205c2024247c20242420205c2024247c2024242424242424247c20242420205c5f5f2f0d0a7c20242420207c2024247c20242420207c2024247c2024247c2024242020202020207c20242420207c2024247c2024242020202020207c20242420207c2024242020202020207c20242420207c2024247c20242420207c2024247c2024242020202020207c2024242020202020202020202020207c20242420207c2024247c2024245f5f5f5f5f2f7c20242420207c2024247c20242420207c2024247c20242420207c2024247c20242420207c2024247c2024245f5f5f5f5f2f7c2024242020202020200d0a7c20202424242424242f7c20242420207c2024247c2024247c2020242424242424247c20202424242424242f7c2024242020202020207c20242420207c2024242020202020207c20242424242424242f7c20202424242424242f7c2024242020202020207c2024242424242424242020202020207c20242424242424242f7c2020242424242424247c20242424242424242f7c20202424242424242f7c2020242424242424247c2020242424242424247c2020242424242424247c2024242020202020200d0a205c5f5f5f5f5f5f2f207c5f5f2f20207c5f5f2f7c5f5f2f205c5f5f5f5f5f5f5f2f205c5f5f5f5f5f5f2f207c5f5f2f2020202020207c5f5f2f20207c5f5f2f2020202020207c5f5f5f5f5f5f5f2f20205c5f5f5f5f5f5f2f207c5f5f2f2020202020207c5f5f5f5f5f5f5f5f2f2020202020207c5f5f5f5f5f5f5f2f20205c5f5f5f5f5f5f5f2f7c5f5f5f5f5f5f5f2f20205c5f5f5f5f5f5f2f20205c5f5f5f5f20202424205c5f5f5f5f20202424205c5f5f5f5f5f5f5f2f7c5f5f2f2020202020200d0a202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202f242420205c202424202f242420205c20242420202020202020202020202020202020202020200d0a2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020207c20202424242424242f7c20202424242424242f20202020202020202020202020202020202020200d0a202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020205c5f5f5f5f5f5f2f20205c5f5f5f5f5f5f2f202020202020202020202020202020202020202020'
    return bytearray.fromhex(banner).decode('iso-8859-1')


def error_format(command, text):
    return colored("ERR", 'red', attrs=['bold', 'underline']) + "(" + \
           colored(command, 'white', attrs=['bold', 'underline']) + "): " + text


def white_bold(text):
    return colored(text, attrs=['bold', 'dark'])


def white_bold_underline(text):
    return colored(text, attrs=['dark', 'bold', 'underline'])


def green_bold(text):
    return colored(text, 'green', attrs=['bold', 'dark'])


def red_bold(text):
    return colored(text, 'red', attrs=['bold', 'dark'])


def get_arch_consts(arch):
    if arch == UC_ARCH_ARM:
        return arm_const
    elif arch == UC_ARCH_ARM64:
        return arm64_const
    elif arch == UC_ARCH_M68K:
        return m68k_const
    elif arch == UC_ARCH_MIPS:
        return mips_const
    elif arch == UC_ARCH_SPARC:
        return sparc_const
    elif arch == UC_ARCH_X86:
        return x86_const


def get_reg_tag(arch):
    if arch == UC_ARCH_ARM:
        return "UC_ARM_REG_"
    elif arch == UC_ARCH_ARM64:
        return "UC_ARM64_REG_"
    elif arch == UC_ARCH_M68K:
        return "UC_M68K_REG_"
    elif arch == UC_ARCH_MIPS:
        return "UC_MIPS_REG_"
    elif arch == UC_ARCH_SPARC:
        return "UC_SPARC_REG_"
    elif arch == UC_ARCH_X86:
        return "UC_X86_REG_"


def prompt_list(items, key, hint):
    base_path = [
        inquirer.List(key,
                      message=hint,
                      choices=items)]
    r = inquirer.prompt(base_path)
    return r[key]


def prompt_arch():
    items = [k for k, v in unicorn_const.__dict__.items() if not k.startswith("__") and k.startswith("UC_ARCH")]
    return prompt_list(items, 'arch', 'Select arch')


def prompt_mode():
    items = [k for k, v in unicorn_const.__dict__.items() if not k.startswith("__") and k.startswith("UC_MODE")]
    return prompt_list(items, 'mode', 'Select mode')


def prompt_cs_arch():
    items = [k for k, v in capstone.__dict__.items() if not k.startswith("__") and k.startswith("CS_ARCH")]
    return prompt_list(items, 'arch', 'Select arch')


def prompt_cs_mode():
    items = [k for k, v in capstone.__dict__.items() if not k.startswith("__") and k.startswith("CS_MODE")]
    return prompt_list(items, 'mode', 'Select mode')


def check_args(pattern, args):
    """
    check that args array matches the pattern type and args len
    :param pattern: string with args type pattern. [int|str|hex], Ex. int int hex.
    :param args: args array to check
    :return:
    """
    # get the pattern array
    p_arr = pattern.split(' ')

    # if args len doesn't match with the pattern
    if len(p_arr) != len(args):
        return False, "args len doesn't match"

    # int str hex
    for i, arg in enumerate(args):
        if arg == '':
            return False, "arg " + str(i) + " is empty"

        # select the right regex for the pattern
        if p_arr[i] == "int":
            reg = r"\d+"
        elif p_arr[i] == "str":
            reg = r".+"
        elif p_arr[i] == "hex":
            reg = r"0x\d+"
        else:
            return False, "pattern " + str(i) + " wrong type"

        if re.match(reg, arg) is None:
            return False, "arg " + str(i) + " should be " + p_arr[i] + " type"

    return True, None
